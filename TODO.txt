Steps to MVP:

HTML: -------------------------------------------------------------------------------------------------------------------------------------
1. header
    a. title of game
    b. score with a span of score value to be updated

2. div: board + tile 
    a. to be created in javascript onload since we want to be able to reset larger board for stretch goals

3. footer: instructions
    a. h4: How to play
    b. instructions with placeholder first

4. etc.
    a. style and script sources

CSS: --------------------------------------------------------------------------------------------------------------------------------------
1. font
2. display flex for divs

javascript: -------------------------------------------------------------------------------------------------------------------------------
1. setting up
    a. setBoard() => creates board div DOM and updates style
    b. createTiles() => class Tile (this.id, this.num)
        i. Tile.createDOM() => initiates tile styling properties on DOM element
        ii. Tile.updateDOM() => updates style properties based on value changes

2. reusable functions for DOM manipulation
    a. countTileValue(val) => counts number of tiles with specific value (useful for multiple scenarios)
    b. generateNew(count) => randomly generate new tile at the end of each turn
        i. emptyTileArray() => returns array of empty tiles to generate based on count
        ii. addVal() => resets Tile.num and uses Tile.updateDOM() to update value in the DOM

3. main functions for game actions
    a. slide(dir) => manipulates nested array based on dir
        i. if left: combineTiles()
        ii. if right: reverse() + combineTiles() + reverse()
        iii. if up: transpose() + combineTiles() + tranpose()
        iv. if down: transpose() + reverse() + combineTiles() + reverse() + tranpose()
        v. tranpose() => nested array to switch between col and row
        // new: checkDuplicate() to see if there are any changes before and after slide
        vii. if same, don't Tile.updateDOM(), else Tile.updateDOM()
    b. combineTiles()
        i. filterZero()
        ii. for loop to combine adjacent values if they are the same, replace next with 0

4. windows.addEventListener()
    a. onload => setBoard()
    b. keyup => slide(dir = arrowkey)
    // new: keydown => prevent default action of moving scroll bars (keydown triggered for keyup to be triggered)

^ MVP achieved! ^ -------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------
Remaining tasks:

// DONE
// . disallow generateNew() if array before = after
//    a. last part of slide(), before remapping values to DOM's properties, add a checkDuplicate()

// . change generateNew() tile selection criteria
//    a. currently goes through the loop and feed random value
//    b. change to get all empty tiles in an array
//    c. get random integer value as index for non-empty tile

2. Triggering game over 
    a. compareGameTiles() if any can be combined
    b. GameOver()
    c. Restart()

3. dropdown.AddEventListener for changing colours
    a. add other colour palettes
    b. add HTML element (button/dropdown) to trigger event LISTENERS
    c. change colPalette value to chosen colour

4. dropdown.AddEventListener for setting value (admin button) to show stretch goal

4. Sliding animation for the tiles

-------------------------------------------------------------------------------------------------------------------------------------------
Stretch goals:

1. After 2048 is reached countTileValue(2048 or above) >= 1
    a. randomly select one tile with value 2,4,8,16 or 32 to glow up
        i. add glowing animation
        ii. glow fades incrementally for x number of turns 
        iii. if its over, the event does not occur
        iv. if it is combined within the x turns, trigger b.
    b. add one more outer ring with diff style (darker empty tiles)
        i. gridCount=6 (instead of gridCount=4)
        ii. tile.id = "t" + this.x+1, this.y+1, e.g. 00 becomes 11, 01 becomes 12
        iii. anything within the exterior border will be removed after end of round
    c. add popup describing challenge
        i. randomly assign challenge e.g. 3x tile.val left after x amount of time 
        ii. if succeed, game goes on and the tiles at the exterior border is removed
        iii. if fail, gameOver()

2. following the above condition, randomly assign another challenge

-------------------------------------------------------------------------------------------------------------------------------------------
Issues to fix: 

// DONE
// . keypress (keyup) down and up arrow keys will also scroll browser
//      https://www.w3schools.com/cssref/css3_pr_overflow-y.php
//      keydown needs to preventdefault() too, since keyup triggers keydown which on default scrolls the window

// DONE
// . font size becomes small after a long time, should be an issue with updateVal
-------------------------------------------------------------------------------------------------------------------------------------------
Describing process:
1. variables

2. class: Tile

3. DOM elements

4. eventListeners

5. functions